{"name":"Laravel-localization","tagline":"Easy localization for Laravel 4","body":"# Laravel Localization\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/mcamara/laravel-localization/version.png)](https://packagist.org/packages/mcamara/laravel-localization) [![Total Downloads](https://poser.pugx.org/mcamara/laravel-localization/d/total.png)](https://packagist.org/packages/mcamara/laravel-localization) [![Build Status](https://travis-ci.org/mcamara/laravel-localization.png)](https://travis-ci.org/mcamara/laravel-localization)\r\n\r\nEasy i18n localization for Laravel 4, an useful tool to combine with Laravel localization classes.\r\n\r\n\r\n## Table of Contents\r\n\r\n- <a href=\"#installation\">Installation</a>\r\n    - <a href=\"#composer\">Composer</a>\r\n    - <a href=\"#manually\">Manually</a>\r\n    - <a href=\"#laravel-4\">Laravel 4</a>\r\n- <a href=\"#usage\">Usage</a>\r\n    - <a href=\"#filters\">Filters</a>\r\n- <a href=\"#helpers\">Helpers</a>\r\n- <a href=\"#translated-routes\">Translated Routes</a>\r\n- <a href=\"#config\">Config</a>\r\n- <a href=\"#changelog\">Changelog</a>\r\n- <a href=\"#license\">License</a>\r\n\r\n## Installation\r\n\r\n### Composer\r\n\r\nAdd Laravel Localization to your `composer.json` file.\r\n\r\n    \"mcamara/laravel-localization\": \"0.15.*\"\r\n\r\nRun `composer install` to get the latest version of the package.\r\n\r\nIf you are using a laravel version lower than 4.2, you should use 0.13.* version. Moreover, 0.15 version will be the last one with support for Laravel 4.2. A new version compatible with Laravel 5 is in development and would be available soon after the final version of Laravel is released, labeled as version 1.x .\r\n\r\n### Manually\r\n\r\nIt's recommended that you use Composer, however you can download and install from this repository.\r\n\r\n### Laravel 4\r\n\r\nLaravel Localization comes with a service provider for Laravel 4. You'll need to add it to your `composer.json` as mentioned in the above steps, then register the service provider with your application.\r\n\r\nOpen `app/config/app.php` and find the `providers` key. Add `LaravelLocalizationServiceProvider` to the array.\r\n\r\n```php\r\n\t...\r\n\t'Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider'\r\n\t...\r\n```\r\n\r\nYou can also add an alias to the list of class aliases in the same app.php\r\n\r\n```php\r\n\t...\r\n\t'LaravelLocalization'\t=> 'Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization'\r\n\t...\r\n```\r\n\r\nTo finish, publish the configuration file using the command `php artisan config:publish mcamara/laravel-localization` in your laravel root path. This will create the following file `app/config/packages/mcamara/laravel-localization/config.php`, containing the most common setting options.\r\n\r\n## Usage\r\n\r\nLaravel Localization uses the URL given for the request. In order to achieve this purpose, a group should be added into the routes.php file. It will filter all pages that must be localized.\r\n\r\n```php\r\n\t// app/routes.php\r\n\r\n\tRoute::group(array('prefix' => LaravelLocalization::setLocale()), function()\r\n\t{\r\n\t\t/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\r\n\t\tRoute::get('/', function()\r\n\t\t{\r\n\t\t\treturn View::make('hello');\r\n\t\t});\r\n\r\n\t\tRoute::get('test',function(){\r\n\t\t\treturn View::make('test');\r\n\t\t});\r\n\t});\r\n\r\n\t/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/\r\n\r\n```\r\n\r\nOnce this group is added to the routes file, a user can access all locales added into 'supportedLocales' ('en' and 'es' by default, look at the config section to change that option). For example, a user can now access to two different locales, using the following addresses:\r\n\r\n```\r\n\thttp://url-to-laravel/en\r\n\thttp://url-to-laravel/es\r\n\thttp://url-to-laravel\r\n```\r\n\r\nIf the locale is not present in the url or it is not defined in 'supportedLocales', the system will use the application default locale or the user's browser default locale (if defined in config file).\r\n\r\nOnce the locale is defined, the locale variable will be stored in a session, so it is not necessary to write the /lang/ section in the url after defining it once, using the last known locale for the user. If the user accesses to a different locale this session value would be changed, translating any other page he visits with the last chosen locale.\r\n\r\nTemplates files and all locale files should follow the [Lang class](http://laravel.com/docs/localization).\r\n\r\n### Filters\r\n\r\nMoreover, this package includes a filter to redirect all \"non-localized\" routes to a \"localized\" one (thanks to Sangar82).\r\n\r\nSo, if a user accesses to http://url-to-laravel/test and the system have this filter active and 'en' as a current locale for this user, it would redirect (301) him automatically to http://url-to-laravel/en/test. This is mainly used to avoid duplicate content and improve SEO performance.\r\n\r\n\r\n```php\r\n\t// app/routes.php\r\n\r\n\tRoute::group(\r\n\tarray(\r\n\t\t'prefix' => LaravelLocalization::setLocale(),\r\n\t\t'before' => 'LaravelLocalizationRedirectFilter' // LaravelLocalization filter\r\n\t),\r\n\tfunction()\r\n\t{\r\n\t\t/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\r\n\t\tRoute::get('/', function()\r\n\t\t{\r\n\t\t\treturn View::make('hello');\r\n\t\t});\r\n\r\n\t\tRoute::get('test',function(){\r\n\t\t\treturn View::make('test');\r\n\t\t});\r\n\t});\r\n\r\n\t/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/\r\n\r\n```\r\nIn order to active it, you just have to attach this filter to the routes you want to be accessible localized.\r\n\r\nIf you want to hide the default locale but always show other locales in the url, switch the 'hideDefaultLocaleInURL' config value to true. Once it's true, if the default locale is en (english) all URLs containing /en/ would be redirected to the same url without this fragment '/' but maintaining the locale as en (English).\r\n\r\n**IMPORTANT** - When hideDefaultLocaleInURL is set to true, the unlocalized root is treated as the applications default locale ```app.locale```.  Because of this language negotiation using the Accept-Language header will **NEVER** occur when hideDefaultLocaleInURL is true.\r\n\r\n## Helpers\r\n\r\nThis package comes with some useful functions, like:\r\n\r\n### Get URL for an specific locale\r\n\r\n```php\r\n\t/**\r\n\t * Returns an URL adapted to $locale\r\n\t *\r\n\t * @param  string|boolean \t$locale\t   \tLocale to adapt, false to remove locale\r\n\t * @param  string|false\t\t$url\t\tURL to adapt in the current language. If not passed, the current url would be taken.\r\n\t * @param  array \t\t\t$attributes\tAttributes to add to the route, if empty, the system would try to extract them from the url.\r\n\t *\r\n\t * @throws UnsupportedLocaleException\r\n\t *\r\n\t * @return string|false\t\t\t\tURL translated, False if url does not exist\r\n\t */\r\n\tpublic function getLocalizedURL($locale = null, $url = null, $attributes = array())\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getLocalizedURL(optional string $locale, optional string $url, optional array $attributes) }}\r\n```\r\n\r\nIt returns a URL localized to the desired locale.\r\n\r\n### Get Clean routes\r\n\r\n```php\r\n\t/**\r\n\t * It returns an URL without locale (if it has it)\r\n\t * Convenience function wrapping getLocalizedURL(false)\r\n\t *\r\n\t * @param  string|false \t$url\t  URL to clean, if false, current url would be taken\r\n\t *\r\n\t * @return string\t\t   URL with no locale in path\r\n\t */\r\n\tpublic function getNonLocalizedURL($url = null)\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getNonLocalizedURL(optional string $url) }}\r\n```\r\n\r\nIt returns a URL clean of any localization.\r\n\r\n\r\n### Get URL for an specific translation key\r\n\r\n```php\r\n\t/**\r\n\t * Returns an URL adapted to the route name and the locale given\r\n\t *\r\n     * @throws UnsupportedLocaleException\r\n     *\r\n\t * @param  string|boolean \t$locale \t\t\tLocale to adapt\r\n\t * @param  string \t\t\t$transKeyName  \t\tTranslation key name of the url to adapt\r\n\t * @param  array \t\t\t$attributes  \t\tAttributes for the route (only needed if transKeyName needs them)\r\n\t *\r\n\t * @return string|false \tURL translated\r\n\t */\r\n\tpublic function getURLFromRouteNameTranslated($locale, $transKeyName, $attributes = array())\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getURLFromRouteNameTranslated(string $locale, optional array $transKeyNames, optional array $attributes) }}\r\n```\r\n\r\nIt returns a route, localized to the desired locale using the locale passed. If the translation key does not exist in the locale given, this function will return false.\r\n\r\n### Get Supported Locales\r\n\r\n```php\r\n\t/**\r\n     * Return an array of all supported Locales\r\n     *\r\n     * @return array\r\n     */\r\n     public function getSupportedLocales()\r\n\r\n\t//Should be called like this:\r\n\t{{ LaravelLocalization::getSupportedLocales() }}\r\n```\r\n\r\nThis function will return all supported locales and their properties as an array.\r\n\r\n### Get Supported Locales Keys\r\n\r\n```php\r\n\t/**\r\n\t * Returns supported languages language key\r\n\t * \r\n\t * @return array \tkeys of supported languages\r\n\t */ \r\n\tpublic function getSupportedLanguagesKeys()\r\n\r\n\t//Should be called like this:\r\n\t{{ LaravelLocalization::getSupportedLanguagesKeys() }}\r\n```\r\n\r\nThis function will return an array with all the keys for the supported locales.\r\n\r\n### Set Locale\r\n\r\n```php\r\n\t/**\r\n     * Set and return current locale\r\n     *\r\n     * @param  string $locale\t        Locale to set the App to (optional)\r\n     *\r\n     * @return string \t\t\t        Returns locale (if route has any) or null (if route does not have a locale)\r\n     */\r\n    public function setLocale($locale = null)\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::setLocale(optional string $locale) }}\r\n```\r\n\r\nThis function will change the application's current locale.\r\nIf the locale is not passed, the locale will be determined via a cookie (if stored previously), the session (if stored previously), browser Accept-Language header or the default application locale (depending on your config file).\r\n\r\nThe function have to be called in the prefix of any route that should be translated (see Filters sections for further information).\r\n\r\n\r\n### Get Current Locale Name\r\n\r\n```php\r\n\t/**\r\n\t * Returns current locale name\r\n\t *\r\n\t * @return string current locale name\r\n\t */\r\n\tpublic function getCurrentLocaleName()\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getCurrentLocaleName() }}\r\n```\r\n\r\nThis function will return current locale name as string (English/Spanish/Arabic/ ..etc).\r\n\r\n\r\n### Get Current Locale Direction\r\n\r\n```php\r\n\t/**\r\n\t * Returns current locale direction\r\n\t *\r\n\t * @return string current locale direction\r\n\t */\r\n\tpublic function getCurrentLocaleDirection()\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getCurrentLocaleDirection() }}\r\n```\r\n\r\nThis function will return current locale direction as string (ltr/rtl).\r\n\r\n\r\n### Get Current Locale Script\r\n\r\n```php\r\n\t/**\r\n\t * Returns current locale script\r\n\t *\r\n\t * @return string current locale script\r\n\t */\r\n\tpublic function getCurrentLocaleScript()\r\n\r\n\t//Should be called in a view like this:\r\n\t{{ LaravelLocalization::getCurrentLocaleScript() }}\r\n```\r\n\r\nThis function will return the [ISO 15924](http://www.unicode.org/iso15924) code for the current locale script as a string; \"Latn\", \"Cyrl\", \"Arab\", etc.\r\n\r\n\r\n## Creating a language selector\r\n\r\nIf you're supporting multiple locales in your project your going to want to provide the users with a way to change language.  Below is a simple example of blade template code you can use to create your own language selector.\r\n\r\n```\r\n<ul class=\"language_bar_chooser\">\r\n\t@foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\r\n        <li>\r\n            <a rel=\"alternate\" hreflang=\"{{$localeCode}}\" href=\"{{LaravelLocalization::getLocalizedURL($localeCode) }}\">\r\n                {{{ $properties['native'] }}}\r\n            </a>\r\n        </li>\r\n\t@endforeach\r\n</ul>\r\n```\r\n\r\n\r\n## Translated Routes\r\n\r\nYou can adapt your URLs depending on the language you want to show them. For example, http://url/en/about and http://url/es/acerca (acerca is about in spanish) or http://url/en/view/5 and http://url/es/ver/5 (view == ver in spanish) would be redirected to the same controller using the proper filter and setting up the translation files as follows:\r\n```php\r\n\t// app/routes.php\r\n\r\n\tRoute::group(\r\n\tarray(\r\n\t\t'prefix' => LaravelLocalization::setLocale(),\r\n\t\t'before' => 'LaravelLocalizationRoutes' // Route translate filter\r\n\t),\r\n\tfunction()\r\n\t{\r\n      /** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\r\n      Route::get('/', function()\r\n      {\r\n      \t// This routes is useless to translate\r\n      \treturn View::make('hello');\r\n      });\r\n\r\n      Route::get(LaravelLocalization::transRoute('routes.about'),function(){\r\n          return View::make('about');\r\n      });\r\n      Route::get(LaravelLocalization::transRoute('routes.view'),function($id){\r\n          return View::make('view',array('id'=>$id));\r\n      });\r\n\t});\r\n\r\n\t/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/\r\n```\r\nIn the routes file you just have to add the `LaravelLocalizationRoutes` filter and the `LaravelLocalization::transRoute` function to every route you want to translate using the translation key.\r\n\r\n_Tip:_ If you want to use this filter with other filters (like `LaravelLocalizationRedirectFilter`) you just have to join them in the Laravel way, using | (eg: `'before' => 'LaravelLocalizationRoutes|LaravelLocalizationRedirectFilter'` )\r\n\r\nThen you have to create the translation files and add there every key you want to translate. I suggest you to create a routes.php file inside your app/lang/language_abbreviation folder. For the previous example, I have created two translations files, these two files would look like:\r\n```php\r\n\t// app/lang/en/routes.php\r\n    return array(\r\n      \"about\" \t\t=> \t\"about\",\r\n      \"view\" \t\t=> \t\"view/{id}\", //we add a route parameter\r\n      // other translated routes\r\n\t);\r\n```\r\n```php\r\n\t// app/lang/es/routes.php\r\n    return array(\r\n      \"about\" \t\t=> \t\"acerca\",\r\n      \"view\" \t\t=> \t\"ver/{id}\", //we add a route parameter\r\n      // other translated routes\r\n\t);\r\n```\r\n\r\nOnce files are saved, you can access to http://url/en/about , http://url/es/acerca , http://url/en/view/5 and http://url/es/ver/5 without any problem. The getLanguageBar function would work as desired and it will translate the routes to all translated languages (don't forget to add any new route to the translation file).\r\n\r\n## Events\r\n\r\nYou can capture the URL parameters during translation if you wish to translate them too. To do so, just create an event listener for the `routes.translation` event like so :\r\n\r\n````\r\nEvent::listen('routes.translation', function($locale, $attributes)\r\n{\r\n\t// Do your magic\r\n\r\n    return $attributes;\r\n});\r\n````\r\n\r\nBe sure to pass the locale and the attributes as parameters for your closure. You can also use Event Subscribers, see : [http://laravel.com/docs/events#event-subscribers](http://laravel.com/docs/events#event-subscribers)\r\n\r\n## Config\r\n\r\nBy default only english and spanish are allowed but it can be changed using config.php file that is located at `app/config/packages/mcamara/laravel-localization/config.php` . If this file does not exist, use the following artisan command `php artisan config:publish mcamara/laravel-localization`  in order to create it.\r\n\r\nThis file have some interesting configuration settings (as the allowed locales or browser language detection, among others) feel free to play with it, all variables are self-explained.\r\n\r\n## Changelog\r\nView changelog here -> [changelog](CHANGELOG.md)\r\n\r\n## License\r\n\r\nLaravel Localization is an open-sourced laravel package licensed under the MIT license\r\n\r\n","google":"UA-57558462-1","note":"Don't delete this file! It's used internally to help with page regeneration."}